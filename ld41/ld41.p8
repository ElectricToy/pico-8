pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- todo game title here
-- by jeff and liam wofford 
-- http://www.electrictoy.co

-->8
--jeff's code

-- todo

-->8
--liam's code

-- todo
i=48

function _update()
 i+=0.25
 if i >= 54 then
	 i=48
 end
end

function _draw()
	cls()
	spr(i,64,64)
end
-->8
-- general utilities

-- object oriented infrastructure. see http://lua-users.org/wiki/inheritancetutorial

function inheritsfrom( baseclass )

    local new_class = {}
    new_class.__index = new_class

    if nil ~= baseclass then
        setmetatable( new_class, { __index = baseclass } )
    end

    -- implementation of additional oo properties starts here --

    -- return the class object of the instance
    function new_class:class()
        return new_class
    end

    -- return the super class object of the instance
    function new_class:superclass()
        return baseclass
    end

    -- return true if the caller is an instance of theclass
    function new_class:isa( theclass )
        local b_isa = false

        local cur_class = new_class

        while nil ~= cur_class do
            if cur_class == theclass then
                b_isa = true
                break
            else
                cur_class = cur_class:superclass()
            end
        end

        return b_isa
    end

    return new_class
end


-- vector class

vector = inheritsfrom( nil )

function vector:new( x, y )
	local newobj = { x = x, y = y }
	return setmetatable( newobj, self )
end

function vector:tostring()
	return self.x .. "," .. self.y
end

function vector:__unm()
	return vector:new( -self.x, -self.y )
end

function vector:__add( other )
	return vector:new( self.x + other.x, self.y + other.y )
end

function vector:__sub( other )
	return vector:new( self.x - other.x, self.y - other.y )
end

function vector:__mul( other )
	return vector:new( self.x * other.x, self.y * other.y )
end

function vector:__div( other )
	return vector:new( self.x / other.x, self.y / other.y )
end

function vector:__eq( other )
	return self.x == other.x and self.y == other.y
end

function vector:dot( other )
	-- todo abort on overflow
	return self.x * other.x + self.y * other.y
end

function vector:lengthsquared()
	return self:dot( self )
end

function vector:length()
	return sqrt( self:lengthsquared() )
end

function vector:manhattanlength()
	return abs( self.x ) + abs( self.y )
end

function vector:normal()
	local len = self:length()
	if len > 0 then
		return vector:new( self.x / len, self.y / len )
	end

	return vector:new( 0, 0 )
end

function vector:perpendicular()
	return vector:new( -self.y, self.x )
end

-- utilities 

function randinrange( min, max )
	assert( max >= min )
	return min + rnd( max - min )
end

function wrap( x, min, maxexclusive )
	assert( maxexclusive > min )
	return min + ( x - min ) % ( maxexclusive - min )
end

function clamp( x, least, greatest )
	assert( greatest >= least )
	return min( greatest, max( least, x ))
end


__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
04444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
444444440000b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
41114141008b80000077700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
117617610878820007aaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
41661661088882000aaaaa0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4f11f1100882220009aaa90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ff777f0002220000099900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f77ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
70000007700000077000000770000007700000077000000700000000000000000000000000000000000000000000000000000000000000000000000000000000
70777007707770077077700770777007707770077077700700000000000000000000000000000000000000000000000000000000000000000000000000000000
70700007707000077070000770700007707000077070000700000000000000000000000000000000000000000000000000000000000000000000000000000000
70700007707000077070000770700007707000077070000700000000000000000000000000000000000000000000000000000000000000000000000000000000
70000007700000077000000770000007700000077000000700000000000000000000000000000000000000000000000000000000000000000000000000000000
70000007700000077000000770000007700000077000000700000000000000000000000000000000000000000000000000000000000000000000000000000000
000eee0000eee00000eee200000eee0000eee000002eee0000000000000000000000000000000000000000000000000000000000000000000000000000000000
000eee2000eee20000eeee20000eeee000eeee00002eeee000000000000000000000000000000000000000000000000000000000000000000000000000000000
000ee82008ee222000e8eee0000ee880022ee880002eee8000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088840088e0244fff888800002e8f0022288ff4442e88000000000000000000000000000000000000000000000000000000000000000000000000000000000
0044f4400f80044000ffff4000fffff004200ff0004448f000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000f000ff00440000000040000040004400ff00000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000f000f000400000000040000040004000f000000000f000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000ff00f0000000000000440000440040000000000000ff00000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000015100141001410014100151000810017100191001a1001c1000d1001e10020100221002510013000291002d1002e100100001d1001f1000d000201002110021100210002210022100221001300022100
